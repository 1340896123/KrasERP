// <auto-generated />
using System;
using KrasERP.EntityFramework.Core.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KrasERP.Database.Migrations.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    [Migration("20230527154359_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KrasERP.Core.Models.BaeView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("RelatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("relatedid");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sortorder");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("sourceid");

                    b.Property<string>("form_classification")
                        .HasColumnType("text")
                        .HasColumnName("form_classification");

                    b.HasKey("Id")
                        .HasName("pk_view");

                    b.HasIndex("RelatedId");

                    b.HasIndex("SourceId");

                    b.ToTable("view", "kras");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f7d7ab8-f1db-f8d7-3fe6-e05f946fd904"),
                            RelatedId = new Guid("693527c1-3f8b-cb70-73b6-8289642cc4ea"),
                            SortOrder = 0,
                            SourceId = new Guid("ea8b80f0-8191-4ba9-aed1-7fd1aa6f9f91")
                        });
                });

            modelBuilder.Entity("KrasERP.Core.Models.BaseField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Css")
                        .HasColumnType("text")
                        .HasColumnName("css");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer")
                        .HasColumnName("fieldtype");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PropertyInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("propertyinfoid");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("sourceid");

                    b.HasKey("Id")
                        .HasName("pk_field");

                    b.HasIndex("PropertyInfoId");

                    b.HasIndex("SourceId");

                    b.ToTable("field", "kras");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dec6908c-bd9b-b1e7-40bb-deb6655b70c5"),
                            FieldType = 0,
                            Label = "名称",
                            Name = "name",
                            PropertyInfoId = new Guid("d47693ab-dacc-1b74-35ee-1cb70750e827"),
                            SourceId = new Guid("693527c1-3f8b-cb70-73b6-8289642cc4ea")
                        },
                        new
                        {
                            Id = new Guid("fd3b2635-4abf-0040-fcac-c07761c61e01"),
                            FieldType = 0,
                            Label = "单数标签",
                            Name = "label",
                            PropertyInfoId = new Guid("71deb1ee-0eed-a0d5-d512-4e249e9a2e44"),
                            SourceId = new Guid("693527c1-3f8b-cb70-73b6-8289642cc4ea")
                        },
                        new
                        {
                            Id = new Guid("421ba6c3-1798-cdac-15bf-2476fba899a1"),
                            FieldType = 0,
                            Label = "复数标签",
                            Name = "labelplural",
                            PropertyInfoId = new Guid("71deb1ee-0eed-a0d5-d512-4e248e9a2e44"),
                            SourceId = new Guid("693527c1-3f8b-cb70-73b6-8289642cc4ea")
                        });
                });

            modelBuilder.Entity("KrasERP.Core.Models.BaseForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_form");

                    b.ToTable("form", "kras");

                    b.HasData(
                        new
                        {
                            Id = new Guid("693527c1-3f8b-cb70-73b6-8289642cc4ea"),
                            Description = "",
                            Name = "ItemType"
                        });
                });

            modelBuilder.Entity("KrasERP.Core.Models.BasePropertyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Auditable")
                        .HasColumnType("boolean")
                        .HasColumnName("auditable");

                    b.Property<bool>("CanMulteSelect")
                        .HasColumnType("boolean")
                        .HasColumnName("canmulteselect");

                    b.Property<Guid>("DataSource")
                        .HasColumnType("uuid")
                        .HasColumnName("datasource");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("text")
                        .HasColumnName("defaultvalue");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("EnableSecurity")
                        .HasColumnType("boolean")
                        .HasColumnName("enablesecurity");

                    b.Property<Guid>("ForeignProperty")
                        .HasColumnType("uuid")
                        .HasColumnName("foreignproperty");

                    b.Property<string>("Format")
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<int>("GridWidth")
                        .HasColumnType("integer")
                        .HasColumnName("gridwidth");

                    b.Property<string>("HelpText")
                        .HasColumnType("text")
                        .HasColumnName("helptext");

                    b.Property<bool>("Index")
                        .HasColumnType("boolean")
                        .HasColumnName("index");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PlaceholderText")
                        .HasColumnType("text")
                        .HasColumnName("placeholdertext");

                    b.Property<int>("Precision")
                        .HasColumnType("integer")
                        .HasColumnName("precision");

                    b.Property<int>("PropertyDataType")
                        .HasColumnType("integer")
                        .HasColumnName("propertydatatype");

                    b.Property<string>("Regex")
                        .HasColumnType("text")
                        .HasColumnName("regex");

                    b.Property<Guid>("Related")
                        .HasColumnType("uuid")
                        .HasColumnName("related");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<int>("Scale")
                        .HasColumnType("integer")
                        .HasColumnName("scale");

                    b.Property<bool>("Searchable")
                        .HasColumnType("boolean")
                        .HasColumnName("searchable");

                    b.Property<Guid>("SourceID")
                        .HasColumnType("uuid")
                        .HasColumnName("sourceid");

                    b.Property<bool>("System")
                        .HasColumnType("boolean")
                        .HasColumnName("system");

                    b.Property<bool>("Unique")
                        .HasColumnType("boolean")
                        .HasColumnName("unique");

                    b.Property<bool?>("UseCurrentTimeAsDefaultValue")
                        .HasColumnType("boolean")
                        .HasColumnName("usecurrenttimeasdefaultvalue");

                    b.HasKey("Id")
                        .HasName("pk_property");

                    b.HasIndex("SourceID");

                    b.ToTable("property", "kras");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47aa96b0-b463-44a9-96f6-073a2f0afe01"),
                            Auditable = false,
                            CanMulteSelect = false,
                            DataSource = new Guid("00000000-0000-0000-0000-000000000000"),
                            EnableSecurity = false,
                            ForeignProperty = new Guid("00000000-0000-0000-0000-000000000000"),
                            GridWidth = 0,
                            Index = false,
                            Label = "ID",
                            Length = 0,
                            Name = "id",
                            Precision = 0,
                            PropertyDataType = 13,
                            Related = new Guid("00000000-0000-0000-0000-000000000000"),
                            Required = true,
                            Scale = 0,
                            Searchable = true,
                            SourceID = new Guid("ea8b80f0-8191-4ba9-aed1-7fd1aa6f9f91"),
                            System = true,
                            Unique = true
                        },
                        new
                        {
                            Id = new Guid("d47693ab-dacc-1b74-35ee-1cb70750e827"),
                            Auditable = false,
                            CanMulteSelect = false,
                            DataSource = new Guid("00000000-0000-0000-0000-000000000000"),
                            EnableSecurity = false,
                            ForeignProperty = new Guid("00000000-0000-0000-0000-000000000000"),
                            GridWidth = 0,
                            Index = false,
                            Label = "名称",
                            Length = 0,
                            Name = "name",
                            Precision = 0,
                            PropertyDataType = 2,
                            Related = new Guid("00000000-0000-0000-0000-000000000000"),
                            Required = true,
                            Scale = 0,
                            Searchable = true,
                            SourceID = new Guid("ea8b80f0-8191-4ba9-aed1-7fd1aa6f9f91"),
                            System = true,
                            Unique = true
                        },
                        new
                        {
                            Id = new Guid("71deb1ee-0eed-a0d5-d512-4e249e9a2e44"),
                            Auditable = false,
                            CanMulteSelect = false,
                            DataSource = new Guid("00000000-0000-0000-0000-000000000000"),
                            EnableSecurity = false,
                            ForeignProperty = new Guid("00000000-0000-0000-0000-000000000000"),
                            GridWidth = 0,
                            Index = false,
                            Label = "单数标签",
                            Length = 0,
                            Name = "label",
                            Precision = 0,
                            PropertyDataType = 2,
                            Related = new Guid("00000000-0000-0000-0000-000000000000"),
                            Required = true,
                            Scale = 0,
                            Searchable = true,
                            SourceID = new Guid("ea8b80f0-8191-4ba9-aed1-7fd1aa6f9f91"),
                            System = true,
                            Unique = true
                        },
                        new
                        {
                            Id = new Guid("71deb1ee-0eed-a0d5-d512-4e248e9a2e44"),
                            Auditable = false,
                            CanMulteSelect = false,
                            DataSource = new Guid("00000000-0000-0000-0000-000000000000"),
                            EnableSecurity = false,
                            ForeignProperty = new Guid("00000000-0000-0000-0000-000000000000"),
                            GridWidth = 0,
                            Index = false,
                            Label = "复数标签",
                            Length = 0,
                            Name = "labelplural",
                            Precision = 0,
                            PropertyDataType = 2,
                            Related = new Guid("00000000-0000-0000-0000-000000000000"),
                            Required = true,
                            Scale = 0,
                            Searchable = true,
                            SourceID = new Guid("ea8b80f0-8191-4ba9-aed1-7fd1aa6f9f91"),
                            System = true,
                            Unique = true
                        },
                        new
                        {
                            Id = new Guid("71deb1ee-0eed-a0d5-d512-4e248e9b2e44"),
                            Auditable = false,
                            CanMulteSelect = false,
                            DataSource = new Guid("00000000-0000-0000-0000-000000000000"),
                            EnableSecurity = false,
                            ForeignProperty = new Guid("00000000-0000-0000-0000-000000000000"),
                            GridWidth = 0,
                            Index = false,
                            Label = "KeyedName",
                            Length = 0,
                            Name = "keyedname",
                            Precision = 0,
                            PropertyDataType = 2,
                            Related = new Guid("00000000-0000-0000-0000-000000000000"),
                            Required = true,
                            Scale = 0,
                            Searchable = true,
                            SourceID = new Guid("ea8b80f0-8191-4ba9-aed1-7fd1aa6f9f91"),
                            System = true,
                            Unique = true
                        });
                });

            modelBuilder.Entity("KrasERP.Core.Models.ItemTypeInfo", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("IconName")
                        .HasColumnType("text")
                        .HasColumnName("iconname");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("LabelPlural")
                        .HasColumnType("text")
                        .HasColumnName("labelplural");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RecordScreenIdField")
                        .HasColumnType("uuid")
                        .HasColumnName("recordscreenidfield");

                    b.Property<bool?>("System")
                        .HasColumnType("boolean")
                        .HasColumnName("system");

                    b.HasKey("Id")
                        .HasName("pk_itemtype");

                    b.ToTable("itemtype", "kras");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea8b80f0-8191-4ba9-aed1-7fd1aa6f9f91"),
                            Color = "",
                            IconName = "",
                            Label = "对象类",
                            LabelPlural = "对象类",
                            Name = "ItemType",
                            System = true
                        });
                });

            modelBuilder.Entity("KrasERP.Core.Models.BaeView", b =>
                {
                    b.HasOne("KrasERP.Core.Models.BaseForm", "Related")
                        .WithMany()
                        .HasForeignKey("RelatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_view_form_relatedid");

                    b.HasOne("KrasERP.Core.Models.ItemTypeInfo", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_view_itemtype_sourceid");

                    b.Navigation("Related");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("KrasERP.Core.Models.BaseField", b =>
                {
                    b.HasOne("KrasERP.Core.Models.BasePropertyInfo", "PropertyInfo")
                        .WithMany()
                        .HasForeignKey("PropertyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_field_property_propertyinfoid");

                    b.HasOne("KrasERP.Core.Models.BaseForm", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_field_form_sourceid");

                    b.Navigation("PropertyInfo");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("KrasERP.Core.Models.BasePropertyInfo", b =>
                {
                    b.HasOne("KrasERP.Core.Models.ItemTypeInfo", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_property_itemtype_sourceid");

                    b.Navigation("Source");
                });
#pragma warning restore 612, 618
        }
    }
}
