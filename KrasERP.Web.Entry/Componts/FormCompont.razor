@using Furion.ClayObject;
@using Furion.FriendlyException;
@using KrasERP.Core.Mappers;
@using KrasERP.Core.Models;
@using KrasERP.Web.Entry.Models;
@using Newtonsoft.Json.Linq;
@using System.Data.Common;
@using Npgsql;
@using Newtonsoft.Json;

<div>
    @render_biaotou
</div>
<div>
    @render_yeqian
    @if (Item.GetValue("structure_view")?.ToString() == "Tab" || true)
    {
        <Tab @ref="relationshipTabSet" IsLazyLoadTabItem="true">
            @*<TabItem Text="">
                <RelationshipItemGroup ></RelationshipItemGroup>

            </TabItem>*@
        </Tab>

    }

</div>

@code {
    private Guid FormID { get; set; }
    [Parameter]
    public Guid ItemTypeID { get; set; }
    [Parameter]
    public CustomDynamicColumnsObjectData Item { get; set; }
    [Parameter]
    public JArray BasePropertys { get; set; }
    private RenderFragment render_biaotou;
    private RenderFragment render_yeqian;
    Dictionary<string, object> dictCompontsInstant = new Dictionary<string, object>();
    private Tab relationshipTabSet;
    //private TabItem relationshipTab;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SetHeader();
            SetYeqian();
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    public void SetHeader()
    {
        System.Console.WriteLine("Form:OnInitializedAsync");
        var sql = "select relatedid from kras.view where  sourceid=@sourceid";
        var dict = new Dictionary<string, object>();
        dict.Add("sourceid", new Guid(Item.GetValue("id").ToString()));
        if (Item.GetValue("classification") != null && Item.GetValue("classification").ToString() != "")
        {
            sql += " and  form_classification=@classification";
            dict.Add("sourceid", Item.GetValue("classification"));
        }
        var fID = sqlRepository.SqlScalar(sql, dict);
        if (fID != null)
        {
            FormID = Guid.Parse(fID.ToString());
        }

        var fieldInfos = sqlRepository.SqlQuery("select *  from  kras.field where  sourceid=@FormID", new { FormID });
        var fieldRows = MapperUtils.DataTable2JArray(fieldInfos);
        render_biaotou = new RenderFragment((builder) =>
      {
          var i = 0;
          // builder.AddMarkupContent(i++, new MarkupString("<Button>新make</Button>").Value);
          foreach (JObject fieldInfo in fieldRows)
          {
              if (fieldInfo["fieldtype"].Value<int>() == (int)FieldType.Text)
              {
                  BootstrapInput<string> input = new BootstrapInput<string>();
                  var fieldName = fieldInfo[nameof(BaseField.Name).ToLower()].ToString();
                  var t_value = Item.GetValue(BasePropertys.Where(l => l["id"]?.ToString() == fieldInfo[nameof(BaseField.PropertyInfoId).ToLower()].ToString()).FirstOrDefault()?["name"]?.ToString() ?? throw Oops.Bah("错误的绑定的属性")).ToString();
                  //dynamic? tem_value = new InputCls { value = t_value };
                  InputCls? tem_value = new InputCls { Value1 = t_value };
                  if (dictCompontsInstant.ContainsKey(fieldName))
                  {
                      tem_value = dictCompontsInstant[fieldName] as InputCls;
                      //continue;
                      //dictCompontsInstant[fieldName] = tem_value;
                  }
                  else
                  {
                      dictCompontsInstant.Add(fieldName, tem_value);
                  }
                  builder.OpenComponent<BootstrapInput<string>>(i++);


                  builder.AddAttribute(i++, "name", fieldName);
                  builder.AddAttribute(i++, nameof(BootstrapInput<string>.Color), Color.Primary);
                  builder.AddAttribute(i++, nameof(BootstrapInput<string>.DisplayText), fieldInfo[nameof(BaseField.Label).ToLower()].ToString());
                  builder.AddAttribute(i++, "style", fieldInfo[nameof(BaseField.Css).ToLower()]?.Value<string>() ?? "");

                  builder.AddAttribute(i++, nameof(BootstrapInput<string>.Value), tem_value.Value1);
                  builder.AddAttribute(i++, nameof(BootstrapInput<string>.OnValueChanged), async (string str) => { tem_value.Value1 = str; });
                  builder.AddAttribute(i++, "ShowLabel", true);
                  builder.CloseComponent();
              }
          }
      });


    }

    public void SetYeqian()
    {
        //if (Item.GetValue("structure_view").ToString() == "Tab")
        //    render_yeqian = new RenderFragment((builder) =>
        //    {
        //        //builder.OpenComponent("");

        //    });


    }




}
